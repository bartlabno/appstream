AWSTemplateFormatVersion: 2010-09-09
Description: "This CloudFormation Stack creates AppStream resources within the default VPC."

Parameters:
  MinCapacity:
    Description: Minimum Capacity of Streaming Instances
    Type: Number
    Default: 1

  MaxCapacity:
    Description: Maximum Capacity of Streaming Instances
    Type: Number
    Default: 5

  Capacity:
    Description: Desired Capacity of Streaming Instances
    Type: Number
    Default: 3

  ApplicationName:
    Description: Image name of application which will be streamed
    Type: String

  InstanceType:
    Description: Type of instance
    Type: String
    Default: stream.standard.medium

  FleetType:
    Description: Type of fleet
    Type: String
    Default: ON_DEMAND
    AllowedValues:
      - ON_DEMAND
      - ALWAYS_ON

  AllowedIp:
    Description: Allowed IP range
    Type: String
    Default: 0.0.0.0/0

{% if vpc is defined %}
  VPC:
    Description: VPC name to use
    Type: String
{% endif %}

{% if subnets is defined %}
  Subnets:
    Description: Subnets as dict
    Type: String
{% endif %}

{% if create_vpc is defined and create_vpc %}
  VpcCidr:
    Description: Ip range for VPC
    Type: String
    Default: 10.10.0.0/16

  SubnetACidr:
    Description: IP range for subnet A
    Type: String
    Default: 10.10.10.0/24

  SubnetBCidr:
    Description: IP range for subnet B
    Type: String
    Default: 10.10.20.0/24

  SubnetCCidr:
    Description: IP range for subnet C
    Type: String
    Default: 10.10.30.0/24
{% endif %}

Resources:
{% if create_vpc is defined and create_vpc %}
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ${ApplicationName}-IG

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetACidr
      MapPublicIpOnLaunch: true

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetBCidr
      MapPublicIpOnLaunch: true

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCCidr
      MapPublicIpOnLaunch: true

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
{% endif %}

  FleetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access to AppStream from specific IPs
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref AllowedIp
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-Fleet

  AppStreamFleet:
    Type: AWS::AppStream::Fleet
    Properties:
      Name: !Sub ${ApplicationName}-fleet
      Description: !Sub This fleet hosting ${ApplicationName} on AppStream
      DisplayName: !Sub A ${ApplicationName} fleet created in CloudFormation
      ImageName: !Ref ApplicationName
      InstanceType: !Ref InstanceType
      FleetType: !Ref FleetType
      ComputeCapacity:
        DesiredInstances: !Ref Capacity
      VpcConfig:
{% if subnets is defined %}
        SubnetIds: !Split
          - ","
          - !Ref Subnets
{% else %}
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
{% endif %}
        SecurityGroupIds:
          - !Ref FleetSecurityGroup
      MaxUserDurationInSeconds: "57600"
      DisconnectTimeoutInSeconds: "900"
      EnableDefaultInternetAccess: False
    CreationPolicy:
      StartFleet: True

  ScaleTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MinCapacity: !Ref MinCapacity
      MaxCapacity: !Ref MaxCapacity
      ResourceId:  !Join
        - ''
        - - 'fleet/'
          - !Ref AppStreamFleet
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess
      ScalableDimension: 'appstream:fleet:DesiredCapacity'
      ServiceNamespace: appstream
    DependsOn:
      - AppStreamFleet

  ScaleInPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Join
        - ''
        - - 'ScaleIn-'
          - !Ref AppStreamFleet
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScaleTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 360
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0.0
            ScalingAdjustment: -1
    DependsOn:
      - ScaleTarget

  ScaleOutPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName:  !Join
        - ''
        - - 'ScaleOut-'
          - !Ref AppStreamFleet
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScaleTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 120
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0.0
            ScalingAdjustment: 2
    DependsOn:
      - ScaleTarget

  ScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties : 
      AlarmActions : 
        - !Ref ScaleInPolicy
      AlarmDescription : "Scale in the fleet when using 25% capacity"
      AlarmName :  !Join
        - ''
        - - 'ScaleInAlarm'
          - !Ref AppStreamFleet
      Dimensions : 
        - Name: Fleet
          Value: !Ref AppStreamFleet
      MetricName : CapacityUtilization
      Namespace : AWS/AppStream
      Period : 120
      EvaluationPeriods : 10      
      Statistic : Average
      Threshold : 25
      ComparisonOperator : LessThanOrEqualToThreshold      
      Unit : Percent
    DependsOn:
      - ScaleInPolicy   

  ScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties : 
      AlarmActions : 
        - !Ref ScaleOutPolicy
      AlarmDescription : "Scale out the fleet when using 75% capacity"
      AlarmName :  !Join
        - ''
        - - 'ScaleOutAlarm'
          - !Ref AppStreamFleet
      Dimensions : 
        - Name: Fleet
          Value: !Ref AppStreamFleet
      MetricName : CapacityUtilization
      Namespace : AWS/AppStream
      Period : 60
      EvaluationPeriods : 3      
      Statistic : Average
      Threshold : 75
      ComparisonOperator : GreaterThanOrEqualToThreshold      
      Unit : Percent
    DependsOn:
      - ScaleOutPolicy
      
  AppStreamStack:
    Type: "AWS::AppStream::Stack"
    Properties:
      Name: !Sub ${ApplicationName}-Stack
      Description: "This stack was created using CloudFormation"
      StorageConnectors:
        - ConnectorType: "HOMEFOLDERS"
          ResourceIdentifier: !Sub ${ApplicationName}Bucket
          
  AppStreamStackFleetAssociation:
    Type: 'AWS::AppStream::StackFleetAssociation'
    Properties:
      FleetName: !Ref AppStreamFleet
      StackName: !Ref AppStreamStack
    DependsOn:
      - AppStreamFleet
      - AppStreamStack
      
{% for user in users %}
  AppStreamUser{{ user.last }}:
    Type: "AWS::AppStream::User"
    Properties:
      UserName: {{ user.mail }}
{% if user.name is defined %}
      FirstName: {{ user.name }}
{% endif %}
      LastName: {{ user.last }}
      AuthenticationType: "USERPOOL"

  AppStreamStackUserAssociation{{ user.last }}:
    Type: "AWS::AppStream::StackUserAssociation"
    Properties:
      UserName: {{ user.mail }}
      StackName: !Ref AppStreamStack
      SendEmailNotification: True
      AuthenticationType: "USERPOOL"
    DependsOn:
     - AppStreamStack
     - AppStreamUser{{ user.last }}

{% endfor %}